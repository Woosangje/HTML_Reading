05/26
자료형, 제어형

전역변수: 자바스크립트 코드 내 어느 위치에서든 선언하여 코드 전 영역에서 사용할 수 있는 변수이다.
지역변수: 변수가 선언된 해당 블록에서 선언하여 범위 내에서만 유효하게 사용할수 있는 변수이다.

label문
outloop:

inloop:

continue outloop;

함수,onclick()

오버라이딩(overriding)은 함수의 이름을 동일하게 사용하면서 인자의 개수와 데이터 타입을 다르게 작성하여 함수 호출시 구분하도록 하는 개념이다.
자바랑c#에서는 지원하는지만 js에서는 지원하지 않는다.
(y===undefined)

인자의 개수가 매개 변수보다 적은 경우 undefined를 사용하여 하였다.
그러나 이 방법은 인자의 개수가 너무 많거나 자주 변하는 경우에는 적용하기 어렵다. 
이떄는 arguments 객체의 배열(array) 구조로 인자를 처리하면 편리하다.
arguments.length는 총 인자 수를 뜻 한다.
374p

자바스크립트에서 배열을 만드는 방법은 두 가지이다. 
첫 번째는 배열 리터럴(array literal)로 생성하는 방법이고, 
두 번째는 배열 객체(object)로 생성하는 방법이다.

배열 선언을 할 때 초깃값을 할당하면서 모든 원소를 명시할 필요는 없다.
배열의 해당 인덱스에 저장할 원소값이 정해지지 않았다면 공백으로 두고 쉼표를 찍은 후 다음 원소를 쓰면 된다.
배열은 명시되지 않은 원솟값을 undefined로 처리한다.

Busan, undefined

공백 데이터가 있는 배열에 연산을 할 경우 출력 결과가 의도한 대로 나오지 않을 수 있다.
NaN

배역 객체로 생성하기
자바스크리트에서 배열은 객체로 취급하기 때문에 Array 생성자를 이용하여 만들 수 있다.
var 배열명 = new Array(원소1, 원소2, 원소3, ... );
var city = new Array("Seoul", "Busan", Incheon");
배열 객체 역시 선언과 초기값 할당을 따로 할 수 있다.
var city=new Array( ); //배열 객체 선언
city[0] = "Seoul";
city[1] = "Busan";
city[2] = "Incheon";

배열 객체 생성 확인 방법
타입 확인 연산자인 typeof 사용		typeof city		object
배열 객체의 메소드인 isArray()사용		Array.isArray(city) 		true
Array 생성자의 연산자인 instanceof 사용	city instanceof Array 	true

배열 관련 메소드
자바스크립트에서는 자주 사용하는 기능을 함수로 만들어 제공하는데 이를 내장 함수(built-in function)라고 한다.
내장 함수는 미리 정의되어 있기 때문에 사용자가 호출하면 결과가 자동으로 출력된다.
자바스크립트 내장 함수는 객체 기반 함수로 제공되는 경우가 많아 메소드(method)라고도 부른다
(c#에서는 함수 자체를 메소드라 부름 )

# 1.join 메소드
배열에 저장된 모든 원소를 문자열로 변환한 후 연결하여 출력한다.
문자열을 연결할 때 구분은 기본적으로 쉼표(,)를 사용하지만 문자 또는 기호(*, /, #, $ 등)를 지정할 수도 있다.

# 2.concat 메소드
지정된 배열에 두 개 이상의 데이터를 결합하거나 다른 배열 객체를 결합한다.
함수 처리 결과 배열을 반환한다.

# 3.reverse 메소드
배열 원소의 순서를 반대로 정렬한다.
즉 배열의 첫 번째 원소가 마지막 원소가 되고, 마지막 원소가 첫 번째 원소가 된다. 
배열에 데이터가 거꾸로 저장되어 있을 때 순서를 바꾸기 위해 많이 사용한다.

# 4.sort 메소드
배열 원소를 정렬한다. 영문자는 알파벳 순으로 정렬하고 한글은 가나다라 순으로 정렬한다.
영문자는 대문자를 먼저 정렬한 후 소문자를 정렬하기 때문에 대소문자가 혼용되어 있는 경우 
toLowerCase() 메소드를 사용하여 영문자를 모두 소문자로 변경한 후 정렬해야 한다.

# 5.slice 메소드
배열의 특정 범위에 속하는 원소만 선택하여 배열을 만든다.
예를 들어 slice(0, 4)는 배열의 0번째 인덱스부터 4번째 인덱스 전까지에 해당하는 데이터를 추출하여 배열로 반환하다.
인자값이 음수라면 배열의 마지막 인덱스를 -1로 보고 데이터를 추출하여 반환한다.

# 6.splice 메소드
배열의 원소를 추가하거나 제거한다.
splice(start, deleteCount, [item...]) 형태로 작성하는데,
첫 번째 인자는 제거 대상의 인덱스 시작 위치이고,
두 번째 인자는 제거할 원소 개수이며
세 번째 이후 인자는 추가할 원소의 데이터 값이다.
예를 들어 splice(1,3)은 두 번째 원소부터 세 개의 원소를 삭제하라는 의미이다.

# 7.pop&push 메소드
배열의 마지막 위치에 데이터를 추가하거나 제거한다. 
pop & push 메소드는 배열을 스택(stack)구조로 활용할 때 사용한다.
스택은 모든 데이터의 삽입과 삭제가 배열의 한쪽 끝에서만 수행되는 구조이다.
push 메소드는 배열의 마지막 위치에 데이터를 추가하고 배열의 길이를 반환한다.
pop메소드는 배열의 마지막 위치에 있는 데이터를 삭제하고 삭제한 데이터를 반환한다.

# 8.shift & unshift 메소드
배열의 멘 처음 위치에 데이터를 추가하거나 제거한다. 
shift 메소드는 배열의 맨 처음 위치에 데이터를 삭제하고 배열의 길이를 반환한다.
unshift 메소드는 배열의 맨 처음 위치에 데이터를 삽입하고 배열의 길이를 반환한다.

# 9.forEach 메소드
배열을 반복하여 저장된 데이터를 조회한다. 
forEach 메소드의 인자로 함수를 호출하여 다양한 연산을 할수있다.

#10.map 메소드
배열의 데이터를 함수의 인자로 전달하고 함수의 수행 결과를 반환 받아 새로운 배열을 생성한다.
기존의 배열 데이터는 그대로 존재한다.

#11.filter 메소드
배열의 데이터 중에 조건이 참인 데이터만 반환하여 새로운 배열을 생성한다.
기존의 배열 데이터는 그대로 존재하며 조건에 맞는 데이터만 선별하여 새로운 배열을 생성한다.

#12. indexOf & lastIndexOf 메소드
배열의 데이터를 검색하여 인덱스 위치를 반환한다.
만약 배열에 데이터가 존재하지 않으면 -1을 반환한다.
또한 검색한 데이터가 중복으로 나타날 경우 맨 처음에 검색된 인덱스 값을 반환한다.
indexOf 메소드는 indexOf(item, start)형태로 작성하여 두 번째 start 인자에 검색 시작 위치를 지정할 수있다.
반면 lastIndexOf 메소드는 배열의 맨 마지막 원소부터 시작하여 검색한다.